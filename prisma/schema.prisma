generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  mobile         String    @unique
  name           String
  surname        String
  nickname       String?
  bio           String?
  profilePicture String?
  isBlocked      Boolean   @default(false)
  isBanned       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  notes          Note[]
  todos          Todo[]
  events         Event[]
  sentMessages   Message[] @relation("SentMessages")
  groups         Group[]
  communities    Community[]
  reports        Report[]  @relation("ReportedBy")
  reportedBy     Report[]  @relation("ReportedUser")
  sharedItems    SharedItem[] @relation("SharedBy")
  sharedWith     SharedItem[] @relation("SharedWith")
}

model Admin {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
}

model Note {
  id          String   @id @default(uuid())
  title       String
  content     String
  folderId    String?
  isPinned    Boolean  @default(false)
  isFavorite  Boolean  @default(false)
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  folder      Folder?  @relation(fields: [folderId], references: [id])
  sharedItems SharedItem[]
}

model Folder {
  id       String  @id @default(uuid())
  name     String
  parentId String?
  userId   String
  notes    Note[]
  parent   Folder? @relation("FolderToFolder", fields: [parentId], references: [id])
  children Folder[] @relation("FolderToFolder")
}

model Todo {
  id          String   @id @default(uuid())
  title       String
  description String?
  isDone      Boolean  @default(false)
  priority    String
  dueDate     DateTime?
  listId      String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  list        TodoList @relation(fields: [listId], references: [id])
  sharedItems SharedItem[]
}

model TodoList {
  id     String @id @default(uuid())
  name   String
  userId String
  todos  Todo[]
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  location    String?
  isAllDay    Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  sharedItems SharedItem[]
}

model Message {
  id          String    @id @default(uuid())
  content     String
  senderId    String
  receiverId  String?
  groupId     String?
  communityId String?
  channelId   String?
  createdAt   DateTime  @default(now())
  sender      User      @relation("SentMessages", fields: [senderId], references: [id])
  group       Group?    @relation(fields: [groupId], references: [id])
  community   Community? @relation(fields: [communityId], references: [id])
  channel     Channel?  @relation(fields: [channelId], references: [id])
}

model Group {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation(fields: [createdById], references: [id])
  messages    Message[]
}

model Community {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation(fields: [createdById], references: [id])
  channels    Channel[]
  messages    Message[]
}

model Channel {
  id          String    @id @default(uuid())
  name        String
  description String?
  communityId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  community   Community @relation(fields: [communityId], references: [id])
  messages    Message[]
}

model Report {
  id             String   @id @default(uuid())
  reporterId     String
  reportedUserId String
  reason         String
  status         String   @default("pending")
  createdAt      DateTime @default(now())
  reporter       User     @relation("ReportedBy", fields: [reporterId], references: [id])
  reportedUser   User     @relation("ReportedUser", fields: [reportedUserId], references: [id])
}

model SharedItem {
  id           String   @id @default(uuid())
  itemType     String
  itemId       String
  ownerId      String
  sharedWithId String
  permission   String
  createdAt    DateTime @default(now())
  owner        User     @relation("SharedBy", fields: [ownerId], references: [id])
  sharedWith   User     @relation("SharedWith", fields: [sharedWithId], references: [id])
  note         Note?    @relation(fields: [itemId], references: [id])
  todo         Todo?    @relation(fields: [itemId], references: [id])
  event        Event?   @relation(fields: [itemId], references: [id])
}